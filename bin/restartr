#!/bin/bash
###########################################################################
##
##  RestartR
##
##    Data collection API for UNC-CH Restart.
##  
##    The restarting research project collects observations form 
##    multiple data sources to characterize a cohort in the context
##    of a pandemic environment.
##
##    This alpha aims to provide a schemaless observation interface.
##    JSON messages are recorded in a single namespace. This will be 
##    revisited as needed and as data specifications become clearer.
##
##    API authentication is done via an API key. Examples below illustrate
##    the HTTP header interaction required.
##
##    
##
##
###########################################################################
set -e
#set -x

#################################################################
##
##  Run the API
##
#################################################################
api () {
    python restartr/api.py $*
}
api_prod () {
    gunicorn --workers=2 --bind=0.0.0.0:5552 --timeout=600 --log-level=debug restartr.api:app
}

#################################################################
##
##  Test the API, given a file and number of iterations.
##
#################################################################
tests () {
    add () {
	file=$1
	iterations=$2
	for x in $(seq 0 $iterations); do
	    curl -d @$file \
		 --header "Content-Type: application/json" \
		 --header "X-API-Key: $API_KEY" \
		 --request POST \
		 --silent \
		 http://localhost:5552/api/observation
	done
    }
    query () {
	file=$1
	iterations=$2
	for x in $(seq 0 $iterations); do
	    curl -d @$file \
		 --header "Content-Type: application/json" \
		 --header "X-API-Key: $API_KEY" \
		 --request POST \
		 --silent \
		 http://localhost:5552/api/query
	done
    }
    $*
}
#################################################################
##
##  Stand up the database and an admin interface.
##
#################################################################
stack () {
    up () {
	docker-compose -f docker/docker-compose.yaml up 
    }
    start () {
	docker-compose -f docker/docker-compose.yaml up -d 
    }
    down () {
	docker-compose -f docker/docker-compose.yaml down
    }
    logs () {
	docker-compose -f docker/docker-compose.yaml logs
    }
    $*
}
#################################################################
##
##  Initialize the environment.
##
#################################################################
init () {
    export API_KEY=${API_KEY:-98079798709797v98709}
    export MONGO_USERNAME=${MONGO_USERNAME:-root}
    export MONGO_PASSWORD=${MONGO_PASSWORD:-example}
    export MONGO_PORT=${MONGO_PORT:-27017}
    export MONGO_HOST=${MONGO_HOST:-localhost}
    export MONGO_URL="mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}"
}

#################################################################
##
## Help message
##
#################################################################
help () {
    printf "
Observation API
  $0 api         \t Run the API
  $0 api --debug \t Run the API in debug mode. Not suitable for production.
  $0 api_prod    \t Run the API in Gunicorn. Suitable for production.

Tests
  $0 tests add F N \t Test posting file F to the API N times.
  $0 tests query F N \t Test querying the API with F N times.

Stack
  $0 stack up    \t Run the stack (MongoDB, Mongo-Express, RestartR API) synchronously.
  $0 stack start \t Run the stack in the background.
  $0 stack down  \t Stop the stack.

"
}

init

$*
